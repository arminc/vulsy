from unittest.mock import patch

import pytest
from freezegun import freeze_time

from vulsy.settings import settings
from vulsy.vulnerability_pipeline.ingestion.models import SourceEndpointInformation
from vulsy.vulnerability_pipeline.ingestion.sources.nvd import get_initial_endpoints_changed_list


@pytest.fixture
def mock_get_json():
    """Fixture to mock the get_json function."""
    with patch("vulsy.vulnerability_pipeline.ingestion.sources.nvd.client.get_json") as mock:
        yield mock


def test_get_initial_endpoints_changed_list_empty_response(mock_get_json):
    """Test get_initial_endpoints_changed_list with an empty response."""
    mock_get_json.return_value = {
        "resultsPerPage": 0,
        "startIndex": 0,
        "totalResults": 0,
        "vulnerabilities": [],
    }

    metadata = {}
    result, updated_metadata = get_initial_endpoints_changed_list(metadata)

    assert result == []
    assert "last_processed_date" in updated_metadata
    assert mock_get_json.call_count == 1


def test_get_initial_endpoints_changed_list_single_page(mock_get_json):
    """Test get_initial_endpoints_changed_list with a single page of results."""
    mock_get_json.return_value = {
        "resultsPerPage": 2,
        "startIndex": 0,
        "totalResults": 2,
        "vulnerabilities": [
            {"cve": {"id": "CVE-2023-0001", "lastModified": "2023-01-01T12:00:00"}},
            {"cve": {"id": "CVE-2023-0002", "lastModified": "2023-01-02T12:00:00"}},
        ],
    }

    metadata = {}
    with freeze_time("2023-01-03T12:00:00"):
        result, updated_metadata = get_initial_endpoints_changed_list(metadata)

    assert len(result) == 2
    assert result[0] == SourceEndpointInformation(
        url="https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2023-0001",
        last_modified="2023-01-01T12:00:00Z",
    )
    assert result[1] == SourceEndpointInformation(
        url="https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2023-0002",
        last_modified="2023-01-02T12:00:00Z",
    )
    assert updated_metadata["last_processed_date"] == "2023-01-03T12:00:00"
    assert mock_get_json.call_count == 1


def test_get_initial_endpoints_changed_list_multiple_pages(mock_get_json):
    """Test get_initial_endpoints_changed_list with multiple pages of results."""
    mock_get_json.side_effect = [
        {
            "resultsPerPage": 2,
            "startIndex": 0,
            "totalResults": 3,
            "vulnerabilities": [
                {"cve": {"id": "CVE-2023-0001", "lastModified": "2023-01-01T12:00:00"}},
                {"cve": {"id": "CVE-2023-0002", "lastModified": "2023-01-02T12:00:00"}},
            ],
        },
        {
            "resultsPerPage": 2,
            "startIndex": 2,
            "totalResults": 3,
            "vulnerabilities": [
                {"cve": {"id": "CVE-2023-0003", "lastModified": "2023-01-03T12:00:00"}},
            ],
        },
    ]

    metadata = {}
    with freeze_time("2023-01-04T12:00:00"):
        result, updated_metadata = get_initial_endpoints_changed_list(metadata)

    assert len(result) == 3
    assert result[2] == SourceEndpointInformation(
        url="https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2023-0003",
        last_modified="2023-01-03T12:00:00Z",
    )
    assert updated_metadata["last_processed_date"] == "2023-01-04T12:00:00"
    assert mock_get_json.call_count == 2


def test_get_initial_endpoints_changed_list_with_existing_metadata():
    """Test get_initial_endpoints_changed_list with existing metadata."""
    with patch("vulsy.vulnerability_pipeline.ingestion.sources.nvd.client.get_json") as mock_get_json:
        mock_get_json.return_value = {
            "resultsPerPage": 1,
            "startIndex": 0,
            "totalResults": 1,
            "vulnerabilities": [
                {"cve": {"id": "CVE-2023-0001", "lastModified": "2023-01-02T12:00:00"}},
            ],
        }
        settings.sources.nvd_api_key = "test"
        metadata = {"last_processed_date": "2023-01-01T12:00:00"}
        with freeze_time("2023-01-03T12:00:00"):
            result, updated_metadata = get_initial_endpoints_changed_list(metadata)

    assert len(result) == 1
    assert result[0] == SourceEndpointInformation(
        url="https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2023-0001",
        last_modified="2023-01-02T12:00:00Z",
    )
    assert updated_metadata["last_processed_date"] == "2023-01-03T12:00:00"
    assert mock_get_json.call_count == 1
    mock_get_json.assert_called_once_with(
        "https://services.nvd.nist.gov/rest/json/cves/2.0",
        {
            "lastModStartDate": "2023-01-01T12:00:00",
            "lastModEndDate": "2023-01-03T12:00:00",
            "resultsPerPage": "1000",
            "startIndex": "0",
        },
        headers={"apiKey": "test"},
    )


def test_get_initial_endpoints_changed_list_error_handling(mock_get_json):
    """Test get_initial_endpoints_changed_list error handling."""
    mock_get_json.side_effect = Exception("API Error")

    metadata = {}
    with pytest.raises(Exception, match="API Error"):
        get_initial_endpoints_changed_list(metadata)


def test_get_initial_endpoints_changed_list_pagination(mock_get_json):
    """Test get_initial_endpoints_changed_list pagination logic."""
    mock_get_json.side_effect = [
        {
            "resultsPerPage": 1000,
            "startIndex": 0,
            "totalResults": 1500,
            "vulnerabilities": [
                {"cve": {"id": f"CVE-2023-{i:04d}", "lastModified": "2023-01-01T12:00:00"}} for i in range(1000)
            ],
        },
        {
            "resultsPerPage": 1000,
            "startIndex": 1000,
            "totalResults": 1500,
            "vulnerabilities": [
                {"cve": {"id": f"CVE-2023-{i:04d}", "lastModified": "2023-01-01T12:00:00"}} for i in range(1000, 1500)
            ],
        },
    ]
    metadata = {}
    with freeze_time("2023-01-02T12:00:00"):
        result, _ = get_initial_endpoints_changed_list(metadata)

    assert len(result) == 1500
    assert mock_get_json.call_count == 2
    assert mock_get_json.call_args_list[0][0][1]["startIndex"] == "0"
    assert mock_get_json.call_args_list[1][0][1]["startIndex"] == "1000"

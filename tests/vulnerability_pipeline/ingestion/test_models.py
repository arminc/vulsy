from unittest.mock import patch

import pytest

from vulsy.common.simpel import now
from vulsy.common.types.isoutcdatetime import IsoUtcDateTime
from vulsy.vulnerability_pipeline.ingestion.models import EndpointRawDataEvent
from vulsy.vulnerability_pipeline.ingestion.names import SourceName


@pytest.mark.parametrize(
    "signature,mock_return,expected",
    [
        ("test_signature", True, True),
        ("test_signature", False, False),
        (None, True, True),  # It will create one automticaly
    ],
)
def test_is_signature_valid(signature: str | None, mock_return: bool, expected: bool) -> None:
    """Test is_signature_valid method with different scenarios."""
    endpoint = EndpointRawDataEvent(
        name=SourceName.NVD,
        url="https://example.com",
        data="test data",
        hash="test_hash",
        signature=signature,
    )

    with patch("vulsy.vulnerability_pipeline.ingestion.models.verify_signature", return_value=mock_return):
        assert endpoint.is_signature_valid() == expected


def test_url_as_hash() -> None:
    """Test url_as_hash method returns correct hash."""
    endpoint = EndpointRawDataEvent(
        name=SourceName.NVD,
        url="https://example.com",
        data="test data",
        hash="test_hash",
        signature="signature",
    )
    expected_hash = "0f115db062b7c0dd030b16878c99dea5c354b49dc37b38eb8846179c7783e9d7"
    assert endpoint.url_as_hash() == expected_hash

"""Models for the ingestion process."""

from enum import StrEnum

from pydantic import BaseModel, Field

from vulsy.common.crypto.rsa import sign_text, verify_signature
from vulsy.common.crypto.sha256 import generate_sha256_hash
from vulsy.common.simpel import now
from vulsy.common.types.date import DateString
from vulsy.common.types.epoch import EpochMs
from vulsy.common.types.isoutcdatetime import IsoUtcDateTime
from vulsy.common.types.url import HttpUrl
from vulsy.vulnerability_pipeline.ingestion.names import SourceName


class IngestionError(Exception):
    """Exception raised for errors in the ingestion process."""


class SourceEndpointInformation(BaseModel):
    """Represents information about a source endpoint to be fetched.

    Attributes:
        url: The URL of the specific source endpoint.
        last_modified: The last time the source endpoint was updated (optional).
            This is stored here because some sources only provide
            the last modified date on the overview page/JSON and
            not on the source itself.
    """

    url: HttpUrl
    last_modified: IsoUtcDateTime | None = None

    def get_hash(self) -> str | None:
        """Get the hash of the source item."""
        return generate_sha256_hash(self.last_modified) if self.last_modified else None


class SourceIngestionStatus(StrEnum):
    """Represents the status of a source ingestion.

    Attributes:
        SUCCESS: The source ingestion was successful.
        FAILURE: The source ingestion failed.
        UNEXECUTED: The source ingestion has not been executed yet.
    """

    SUCCESS = "success"
    FAILURE = "failure"
    UNEXECUTED = "unexecuted"


class SourceIngestionMetadata(BaseModel):
    """Represents the metadata about a specific source, not the endpoints of the source.

    Attributes:
        last_run_start_time: The start time of the last run.
        last_run_end_time: The end time of the last run.
        last_run_status: The status of the last run.
        metadata: Additional metadata relevant to the source on ingestion,
            could be index of the last fetched item or other information.
    """

    last_run_start_time: IsoUtcDateTime = now()
    last_run_end_time: IsoUtcDateTime = now()
    last_run_status: SourceIngestionStatus = SourceIngestionStatus.UNEXECUTED
    metadata: dict = {}


class EndpointRawDataEventV1(BaseModel):
    """Represents version 1 of an event for a source endpoint, includes raw data from the source.

    Attributes:
        version: The version of the event. Currently version 1.
        timestamp: The timestamp of the event.
        name: The name of the source.
        url: The URL of the endpoint.
        data: The raw data from the source endpoint.
        hash: The hash of the data. Can be a hash of the datetime when the data has changed if the source supports that.
        signature: Cryptographic signature of the event data. Auto-generated and immutable.
    """

    version: int = 1
    timestamp: IsoUtcDateTime = now()
    name: SourceName
    url: HttpUrl
    data: str
    hash: str
    signature: str | None = Field(frozen=True, default=None)

    def model_post_init(self, _) -> None:  # noqa: ANN001
        """Post initialization hook to generate the signature."""
        if self.signature is None:
            content_to_sign = self.model_dump_json(exclude={"signature"})
            object.__setattr__(self, "signature", sign_text(content_to_sign))


class EndpointRawDataEvent(EndpointRawDataEventV1):
    """Represents an event for a source endpoint, includes raw data from the source.

    It always represents the latest version of the event.

    Attributes:
        version: The version of the event. Currently version 1.
        timestamp: The timestamp of the event.
        name: The name of the source.
        url: The URL of the endpoint.
        data: The raw data from the source endpoint.
        hash: The hash of the data. Can be a hash of the datetime when the data has changed if the source supports that.
        signature: Cryptographic signature of the event data. Auto-generated and immutable.
    """

    def is_signature_valid(self) -> bool:
        """Check if the signature is valid."""
        if self.signature is None:
            return False
        content_to_sign = self.model_dump_json(exclude={"signature"})
        return verify_signature(content_to_sign, self.signature)

    def url_as_hash(self) -> str:
        """Get the URL as a hash."""
        return generate_sha256_hash(self.url)


class Metrics(BaseModel):
    """Represents the metrics for a source ingestion.

    The data is stored in a list of lists, where each inner list contains two integers representing a timestamp and
    a count for total items ingested, a count for items that are different and a count for failed items ingested.

    Attributes:
        day: The day of the metrics in the format DD-MM-YYYY.
        source_name: The name of the source.
        ts_start: The start time of the metrics in unix timestamp in seconds.
        ts_end: The end time of the metrics in unix timestamp in seconds.
        ts_data: The data of the metrics

    """

    day: DateString
    source_name: SourceName
    ts_start: EpochMs
    ts_end: EpochMs
    ts_data: list[list[int]]

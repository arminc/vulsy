"""Ingestion source for NVD."""

import time
from copy import deepcopy
from datetime import datetime

from pydantic import BaseModel, Field

from vulsy.common.http import client
from vulsy.settings import settings
from vulsy.vulnerability_pipeline.ingestion.models import SourceEndpointInformation


class CveItem(BaseModel):
    """Represents a CVE (Common Vulnerabilities and Exposures) item.

    Attributes:
        id: The unique identifier of the CVE.
        last_modified: The date and time when the CVE was last modified.
    """

    id: str
    last_modified: datetime = Field(alias="lastModified")


class DefCveItem(BaseModel):
    """Represents a defined CVE item.

    Attributes:
        cve: The CveItem object containing CVE details.
    """

    cve: CveItem


class VulnerabilityData(BaseModel):
    """Represents vulnerability data from the NVD API response.

    Attributes:
        results_per_page: The number of results per page.
        start_index: The starting index of the results.
        total_results: The total number of results.
        vulnerabilities: A list of DefCveItem objects.
    """

    results_per_page: int = Field(ge=0, alias="resultsPerPage")
    start_index: int = Field(ge=0, alias="startIndex")
    total_results: int = Field(ge=0, alias="totalResults")
    vulnerabilities: list[DefCveItem]


def get_initial_endpoints_changed_list(metadata: dict) -> tuple[list[SourceEndpointInformation], dict]:
    """Retrieve a list of NVD CVE endpoints that have changed since the last processed date.

    This function fetches NVD data from the NVD API, processes it, and returns a list of
    SourceEndpointInformation containing NVD url from where the CVE can be fetched and their last modified dates.
    It also updates the metadata with the latest processed date.

    Args:
        metadata: A dictionary containing metadata, including the last processed date.

    Returns:
        A tuple containing:
            - A list of SourceEndpointInformation, each representing a NVD URL about a changed CVE.
            - The updated metadata dictionary.

    Raises:
        ValueError: If the response data is invalid according to Pydantic validation.
        HTTPError: If there is an error with the HTTP request made by get_json.
    """
    now = datetime.now().isoformat()
    last_processed_date: str = metadata.get("last_processed_date", now)
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    # NVD allows max 2000 results per page but we use 1000 to be safe
    params: dict[str, str] = {
        "lastModStartDate": last_processed_date,
        "lastModEndDate": now,
        "resultsPerPage": "1000",
        "startIndex": "0",  # Ensure this starts at 0
    }

    cve_list: list[SourceEndpointInformation] = []
    total_results = None

    while total_results is None or int(params["startIndex"]) < total_results:
        response_data = client.get_json(
            base_url, deepcopy(params), headers={"apiKey": settings.sources.nvd_api_key}
        )  # Always copy the dict to make sure someone else hasn't edited it
        vulnerability_data = VulnerabilityData.model_validate(response_data)

        if total_results is None:
            total_results = vulnerability_data.total_results

        for vuln in vulnerability_data.vulnerabilities:
            cve_id = vuln.cve.id
            # Add UTC timezone indicator as this is in UTC but without timezone information
            last_modified = vuln.cve.last_modified.isoformat() + "Z"
            cve_list.append(SourceEndpointInformation(url=f"{base_url}?cveId={cve_id}", last_modified=last_modified))

        if int(params["startIndex"]) + vulnerability_data.results_per_page >= total_results:
            break
        params["startIndex"] = str(int(params["startIndex"]) + vulnerability_data.results_per_page)

    # Create a copy of the metadata to avoid modifying the original
    copied_metadata = deepcopy(metadata)
    copied_metadata["last_processed_date"] = now

    return cve_list, copied_metadata


def get_rawdata(
    url: str,
    params: dict[str, str] | None = None,
    headers: dict[str, str] | None = None,
    config: client.HTTPRequestConfig | None = None,
) -> str:
    """Get raw data (JSON in text format) from NVD url, keep rate limit in check.

    Args:
        url: The URL to request.
        params: Optional query parameters to include in the request.
        headers: Optional headers to include in the request.
        config: Configuration object for request settings.
    """
    time.sleep(0.6)
    return client.get_text(url, params, headers, config)

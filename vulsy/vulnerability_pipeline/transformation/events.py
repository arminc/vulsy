"""Events that are transformed."""

from pydantic import BaseModel

from vulsy.common.types.cve import Cve
from vulsy.common.types.isoutcdatetime import IsoUtcDateTime
from vulsy.common.types.url import HttpUrl
from vulsy.vulnerability_pipeline.ingestion.names import SourceName
from vulsy.vulnerability_pipeline.transformation.models import EventAction, EventType


class BaseEvent(BaseModel):
    """Base class for all events.

    Attributes:
        timestamp: When the event was created
        version: Schema version of the event
        source_name: Name of the source that the data was fetched from
        url: URL of the source that the data was fetched from
        ingestion_event_id: ID of the ingestion event that this event is based on
        published: Date the vulnerability was published by the source
        changed: Date the vulnerability was last changed by the source
    """

    event_type: EventType
    event_action: EventAction
    version: int
    timestamp: IsoUtcDateTime
    source_name: SourceName
    url: HttpUrl
    ingestion_event_id: str
    published: IsoUtcDateTime | None
    changed: IsoUtcDateTime | None


class VulnerabilityEventV1(BaseEvent):
    """Event for a vulnerability.

    Attributes:
        cve: CVE of the vulnerability
        published: Date the vulnerability was published
    """

    event_type: EventType = EventType.VULNERABILITY
    version: int = 1
    cve: Cve
    cve_status: str


class VulnerabilityEvent(VulnerabilityEventV1):
    """Event for a vulnerability, always represents the latest version."""
